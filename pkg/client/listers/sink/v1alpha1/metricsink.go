/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/observability/pkg/apis/sink/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MetricSinkLister helps list MetricSinks.
type MetricSinkLister interface {
	// List lists all MetricSinks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MetricSink, err error)
	// MetricSinks returns an object that can list and get MetricSinks.
	MetricSinks(namespace string) MetricSinkNamespaceLister
	MetricSinkListerExpansion
}

// metricSinkLister implements the MetricSinkLister interface.
type metricSinkLister struct {
	indexer cache.Indexer
}

// NewMetricSinkLister returns a new MetricSinkLister.
func NewMetricSinkLister(indexer cache.Indexer) MetricSinkLister {
	return &metricSinkLister{indexer: indexer}
}

// List lists all MetricSinks in the indexer.
func (s *metricSinkLister) List(selector labels.Selector) (ret []*v1alpha1.MetricSink, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MetricSink))
	})
	return ret, err
}

// MetricSinks returns an object that can list and get MetricSinks.
func (s *metricSinkLister) MetricSinks(namespace string) MetricSinkNamespaceLister {
	return metricSinkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MetricSinkNamespaceLister helps list and get MetricSinks.
type MetricSinkNamespaceLister interface {
	// List lists all MetricSinks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MetricSink, err error)
	// Get retrieves the MetricSink from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MetricSink, error)
	MetricSinkNamespaceListerExpansion
}

// metricSinkNamespaceLister implements the MetricSinkNamespaceLister
// interface.
type metricSinkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MetricSinks in the indexer for a given namespace.
func (s metricSinkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MetricSink, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MetricSink))
	})
	return ret, err
}

// Get retrieves the MetricSink from the indexer for a given namespace and name.
func (s metricSinkNamespaceLister) Get(name string) (*v1alpha1.MetricSink, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("metricsink"), name)
	}
	return obj.(*v1alpha1.MetricSink), nil
}
