/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/observability/pkg/apis/sink/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LogSinkLister helps list LogSinks.
type LogSinkLister interface {
	// List lists all LogSinks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LogSink, err error)
	// LogSinks returns an object that can list and get LogSinks.
	LogSinks(namespace string) LogSinkNamespaceLister
	LogSinkListerExpansion
}

// logSinkLister implements the LogSinkLister interface.
type logSinkLister struct {
	indexer cache.Indexer
}

// NewLogSinkLister returns a new LogSinkLister.
func NewLogSinkLister(indexer cache.Indexer) LogSinkLister {
	return &logSinkLister{indexer: indexer}
}

// List lists all LogSinks in the indexer.
func (s *logSinkLister) List(selector labels.Selector) (ret []*v1alpha1.LogSink, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogSink))
	})
	return ret, err
}

// LogSinks returns an object that can list and get LogSinks.
func (s *logSinkLister) LogSinks(namespace string) LogSinkNamespaceLister {
	return logSinkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogSinkNamespaceLister helps list and get LogSinks.
type LogSinkNamespaceLister interface {
	// List lists all LogSinks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LogSink, err error)
	// Get retrieves the LogSink from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LogSink, error)
	LogSinkNamespaceListerExpansion
}

// logSinkNamespaceLister implements the LogSinkNamespaceLister
// interface.
type logSinkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogSinks in the indexer for a given namespace.
func (s logSinkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogSink, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogSink))
	})
	return ret, err
}

// Get retrieves the LogSink from the indexer for a given namespace and name.
func (s logSinkNamespaceLister) Get(name string) (*v1alpha1.LogSink, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("logsink"), name)
	}
	return obj.(*v1alpha1.LogSink), nil
}
